version: 2.1
orbs:
  aws-s3: circleci/aws-s3@1.0.11

commands:
  yarn_install:
    steps:
      - restore_cache:
          name: Yarn cache restore
          keys:
            - v2-yarn-cache-{{ .Branch }}-{{ checksum "frontend/yarn.lock" }}
      - run:
          name: yarn install
          command: yarn install --frozen-lockfile
          working_directory: frontend
      - run:
          name: cp env
          command: cp .env.ci .env
          working_directory: frontend
      - save_cache:
          name: Save yarn cache
          key: v2-yarn-cache-{{ .Branch }}-{{ checksum "frontend/yarn.lock" }}
          paths:
            - ~/caches/yarn
  yarn_build:
    steps:
      - run:
          name: yarn build
          command: yarn build --runInBand
          working_directory: frontend
      - persist_to_workspace:
          root: ./frontend
          paths:
            - build
      - run:
          name: ls
          command: ls -la
          working_directory: frontend

executors:
  frontend-excutor:
    working_directory: ~/project/frontend
    docker:
      - image: circleci/node
  backend-executor:
    working_directory: ~/project
    machine:
      image: circleci/classic:edge
jobs:
  docker-compose-cache:
    executor: backend-executor
    steps:
      - checkout
      - restore_cache:
          key: v2-docker-cache-{{ .Branch }}--{{ checksum "backend/django/requirements.txt" }}}--{{ checksum "docker-compose.yml" }}--{{ checksum "backend/django/Dockerfile" }}
      - run:
          name: docker build
          command: |
            if [ ! -f ~/caches/docker.tar ]; then
              docker-compose -f docker-compose-ci.yml build
              mkdir -p ~/caches
              docker save $(docker images | awk 'NR>=2 && ! /^<none>/{print $1}') -o ~/caches/docker.tar
            fi
      - save_cache:
          key: v2-docker-cache-{{ .Branch }}--{{ checksum "backend/django/requirements.txt" }}}--{{ checksum "docker-compose.yml" }}--{{ checksum "backend/django/Dockerfile" }}
          paths:
            - ~/caches/docker.tar
  backend-test:
    executor: backend-executor
    steps:
      - checkout
      - restore_cache:
          key: v2-docker-cache-{{ .Branch }}--{{ checksum "backend/django/requirements.txt" }}}--{{ checksum "docker-compose.yml" }}--{{ checksum "backend/django/Dockerfile" }}
      - run:
          name: docker load
          command: |
            docker load -i ~/caches/docker.tar
      # - run:
      #     name: ".env copy"
      #     command: docker-compose run -u uwsgi backend cp -p .env.ci .env
      # - run:
      #     name: compose up
      #     command: docker-compose -f docker-compose-ci.yml up -d
      - run:
          name: sleep for waiting launch db
          command: sleep 15
      - run:
          name: "before_test: makemigrations"
          command: docker-compose -f docker-compose-ci.yml run backend python manage.py makemigrations
      - run:
          name: "before_test: migrate"
          command: docker-compose -f docker-compose-ci.yml run backend python manage.py migrate
      - run:
          name: "test pytest"
          command: docker-compose -f docker-compose-ci.yml run backend pytest
      - save_cache:
          key: v2-docker-cache-{{ .Branch }}--{{ checksum "backend/django/requirements.txt" }}}--{{ checksum "docker-compose.yml" }}--{{ checksum "backend/django/Dockerfile" }}
          paths:
            - ~/caches/docker.tar
  frontend-test:
    executor: frontend-excutor
    steps:
      - checkout
      - yarn_install
      - run:
          name: yarn test
          command: yarn test --runInBand
          working_directory: frontend
  frontend-build:
    executor: frontend-excutor
    steps:
      - checkout
      - yarn_install
      - yarn_build

  frontend-deploy:
    executor: frontend-excutor
    steps:
      - attach_workspace:
          at: ./frontend
      # - checkout
      # - yarn_install
      - run:
          name: ls frontend
          command: ls -la
          working_directory: frontend
      - run:
          name: ls
          command: ls -la

      # - run:
      #     name: yarn build
      #     command: yarn build --runInBand
      #     working_directory: frontend
      - aws-s3/sync:
          from: frontend/build
          to: "s3://${S3_FRONTEND_BUILD_SOURCE_BUCKET_NAME}"
          # to: "s3://junkata-blog"
          # arguments: | # Optional arguments
          #   --acl public-read \
          #   --cache-control "max-age=86400"
          overwrite: true

workflows:
  version: 2
  build-and-test:
    jobs:
      - docker-compose-cache
      - backend-test:
          requires:
            - docker-compose-cache
      - frontend-test
      - frontend-build:
          requires:
            - frontend-test
      - frontend-deploy:
          requires:
            - frontend-build
          filters:
            branches:
              only: master
