# Required environment variables
# APP_PREFIX
# AWS_ACCESS_KEY_ID
# AWS_REGION
# AWS_ECR_ACCOUNT_URL
# AWS_SECRET_ACCESS_KEY
# BACKEND_API_URL
# GTM_ID

version: 2.1
orbs:
  aws-cli: circleci/aws-cli@1.4.0
  aws-s3: circleci/aws-s3@1.0.11
  aws-ecr: circleci/aws-ecr@6.15.2
  aws-ecs: circleci/aws-ecs@1.4.0
commands:
  yarn_install:
    steps:
      - restore_cache:
          name: Yarn cache restore
          keys:
            - v2-yarn-cache-{{ .Branch }}-{{ checksum "frontend/yarn.lock" }}
      - run:
          name: yarn config set
          command: yarn config set network-timeout 300000
          working_directory: frontend
      - run:
          name: yarn install
          command: yarn install --frozen-lockfile
          working_directory: frontend
      - run:
          name: cp env
          command: cp .env.ci .env
          working_directory: frontend
      - save_cache:
          name: Save yarn cache
          key: v2-yarn-cache-{{ .Branch }}-{{ checksum "frontend/yarn.lock" }}
          paths:
            - ~/caches/yarn
  yarn_build:
    steps:
      - run:
          name: yarn build
          command: REACT_APP_BACKEND=${BACKEND_API_URL} REACT_APP_GTM=${GTM_ID} yarn build --runInBand
          working_directory: frontend
      - persist_to_workspace:
          root: ./frontend
          paths:
            - build
      - run:
          name: ls
          command: ls -la
          working_directory: frontend

executors:
  frontend-excutor:
    working_directory: ~/project/frontend
    docker:
      - image: circleci/node
  backend-executor:
    working_directory: ~/project
    machine:
      image: circleci/classic:edge
jobs:
  docker-compose-cache:
    executor: backend-executor
    steps:
      - checkout
      - restore_cache:
          key: v2-docker-cache-{{ .Branch }}--{{ checksum "backend/django/requirements.txt" }}}--{{ checksum "docker-compose.yml" }}--{{ checksum "backend/django/Dockerfile" }}
      - run:
          name: docker build
          command: |
            if [ ! -f ~/caches/docker.tar ]; then
              docker-compose -f docker-compose-ci.yml build
              mkdir -p ~/caches
              docker save $(docker images | awk 'NR>=2 && ! /^<none>/{print $1}') -o ~/caches/docker.tar
            fi
      - save_cache:
          key: v2-docker-cache-{{ .Branch }}--{{ checksum "backend/django/requirements.txt" }}}--{{ checksum "docker-compose.yml" }}--{{ checksum "backend/django/Dockerfile" }}
          paths:
            - ~/caches/docker.tar
  backend-test:
    executor: backend-executor
    steps:
      - checkout
      - restore_cache:
          key: v2-docker-cache-{{ .Branch }}--{{ checksum "backend/django/requirements.txt" }}}--{{ checksum "docker-compose.yml" }}--{{ checksum "backend/django/Dockerfile" }}
      - run:
          name: docker load
          command: |
            docker load -i ~/caches/docker.tar
      - run:
          name: compose up
          command: docker-compose -f docker-compose-ci.yml up -d
      - run:
          name: sleep for waiting launch db
          command: sleep 10
      - run:
          name: 'before_test: makemigrations'
          command: docker-compose -f docker-compose-ci.yml run backend python manage.py makemigrations
      - run:
          name: 'before_test: migrate'
          command: docker-compose -f docker-compose-ci.yml run backend python manage.py migrate
      - run:
          name: 'test pytest'
          command: docker-compose -f docker-compose-ci.yml run backend pytest -c pytest.ini
      - save_cache:
          key: v2-docker-cache-{{ .Branch }}--{{ checksum "backend/django/requirements.txt" }}}--{{ checksum "docker-compose.yml" }}--{{ checksum "backend/django/Dockerfile" }}
          paths:
            - ~/caches/docker.tar
  frontend-test:
    executor: frontend-excutor
    steps:
      - checkout
      - yarn_install
      - run:
          name: yarn test
          command: yarn test --runInBand
          working_directory: frontend
  frontend-build:
    executor: frontend-excutor
    steps:
      - checkout
      - yarn_install
      - yarn_build

  production-frontend-deploy:
    executor: frontend-excutor
    steps:
      - attach_workspace:
          at: ./frontend
      - aws-s3/sync:
          from: frontend/build
          to: 's3://${APP_PREFIX}-production-storage'
          arguments: --exclude "/storage/*"
  production-django-docker-image-build-and-deploy:
    executor: backend-executor
    steps:
      - aws-ecr/build-and-push-image:
          repo: '${APP_PREFIX}-production-django'
          region: AWS_REGION
          path: backend/django/
          tag: latest
  production-nginx-docker-image-build-and-deploy:
    executor: backend-executor
    steps:
      - aws-ecr/build-and-push-image:
          repo: '${APP_PREFIX}-production-nginx'
          region: AWS_REGION
          path: backend/nginx/

  production-ecs-service-update:
    executor: backend-executor
    steps:
      - aws-cli/install
      - aws-cli/configure:
          aws-access-key-id: $AWS_ACCESS_KEY_ID
          aws-region: $AWS_REGION
      - aws-ecs/update-service:
          family: '${APP_PREFIX}-production'
          cluster-name: '${APP_PREFIX}-production-ecs'
          service-name: 'web_app'

  production-migration:
    executor: backend-executor
    steps:
      - aws-ecs/run-task:
          awsvpc: true
          platform-version: 'LATEST'
          launch-type: 'FARGATE'
          cluster: '${APP_PREFIX}-production-ecs'
          security-group-ids: ${AWS_SECURITY_GROUP_ID}
          subnet-ids: ${AWS_SUBNET_ONE}
          task-definition: '${APP_PREFIX}-production-batch'
          assign-public-ip: 'ENABLED'
          # overrides: '{\\\"containerOverrides\\\": [{\\\"name\\\":\\\"${APP_PREFIX}-production-batch\\\",\\\"command\\\": [ \\\"python\\\", \\\"manage.py\\\", \\\"migrate\\\" ]}]}'
      # - run:
      #     name: 'db migrate'
      #     command: |
      #       aws ecs run-task \
      #       --cluster "${APP_PREFIX}-production-ecs" \
      #       --task-definition "${APP_PREFIX}-production-batch" \
      #       --network-configuration "awsvpcConfiguration={subnets=[${AWS_SUBNET_ONE}],securityGroups=[${AWS_SECURITY_GROUP_ID}],assignPublicIp=ENABLED}"

workflows:
  version: 2
  build-and-test:
    jobs:
      - docker-compose-cache
      - production-migration
      # - backend-test:
      #     requires:
      #       - docker-compose-cache
      # - frontend-test
      # - frontend-build:
      #     requires:
      #       - frontend-test
      # - production-frontend-deploy:
      #     requires:
      #       - frontend-build
      #     filters:
      #       branches:
      #         only: master
      # - production-django-docker-image-build-and-deploy:
      #     requires:
      #       - backend-test
      #     filters:
      #       branches:
      #         only: master
      # - production-nginx-docker-image-build-and-deploy:
      #     requires:
      #       - backend-test
      #     filters:
      #       branches:
      #         only: master
      # - production-ecs-service-update:
      #     requires:
      #       - production-django-docker-image-build-and-deploy
      #       - production-nginx-docker-image-build-and-deploy
      #       - production-migration
      #     filters:
      #       branches:
      #         only: master
